// .env.example - Environment variables template

# Server Configuration
PORT=3000
NODE_ENV=development
FRONTEND_URL=http://localhost:3000

MONGODB_URI=mongodb+srv://enochdziwornu20:YxbNIz6eDpTe6JqV@etornam.s742ioq.mongodb.net/mentorship?retryWrites=true&w=majority
# For MongoDB Atlas: mongodb+srv://username:password@cluster.mongodb.net/mentorship
MONGODB_ATLAS=mongodb+srv://enochdziwornu20:YxbNIz6eDpTe6JqV@etornam.s742ioq.mongodb.net/mentorship

# Email Configuration (Gmail example)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=pastorkusiboadum@gmail.com
SMTP_PASS=Welcome2025!
SMTP_FROM=noreply@kusiboadumministries.com
ADMIN_EMAIL=admin@kusiboadumministries.com

# JWT Secret (generate a random string)
JWT_SECRET=d5fd469d4094e7e60cd274dff104ddb3

# Admin Configuration
ADMIN_USERNAME=admin
ADMIN_PASSWORD=Welcome2025!
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5000

---

// config/database.js - Database configuration
const mongoose = require('mongoose');

const connectDB = async () => {
    try {
        const conn = await mongoose.connect(process.env.MONGODB_ATLAS, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });

        console.log(`MongoDB Connected: ${conn.connection.host}`);
    } catch (error) {
        console.error('Database connection error:', error);
        process.exit(1);
    }
};

module.exports = connectDB;

---

// middleware/auth.js - Authentication middleware
const jwt = require('jsonwebtoken');

const authenticateAdmin = (req, res, next) => {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
        return res.status(401).json({
            success: false,
            message: 'Access denied. No token provided.'
        });
    }
    
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.admin = decoded;
        next();
    } catch (error) {
        res.status(401).json({
            success: false,
            message: 'Invalid token.'
        });
    }
};

module.exports = { authenticateAdmin };

---

// routes/admin.js - Admin routes
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { authenticateAdmin } = require('../middleware/auth');
const Registration = require('../models/Registration');

const router = express.Router();

// Admin login
router.post('/login', async (req, res) => {
    try {
        const { username, password } = req.body;
        
        // Simple admin check (in production, use a proper user system)
        if (username !== process.env.ADMIN_USERNAME) {
            return res.status(401).json({
                success: false,
                message: 'Invalid credentials'
            });
        }
        
        const isValidPassword = await bcrypt.compare(password, await bcrypt.hash(process.env.ADMIN_PASSWORD, 10));
        
        if (!isValidPassword) {
            return res.status(401).json({
                success: false,
                message: 'Invalid credentials'
            });
        }
        
        const token = jwt.sign(
            { username, role: 'admin' },
            process.env.JWT_SECRET,
            { expiresIn: '24h' }
        );
        
        res.json({
            success: true,
            message: 'Login successful',
            token
        });
        
    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({
            success: false,
            message: 'Login failed'
        });
    }
});

// Get dashboard statistics
router.get('/dashboard', authenticateAdmin, async (req, res) => {
    try {
        const totalRegistrations = await Registration.countDocuments();
        const pendingCount = await Registration.countDocuments({ status: 'pending' });
        const approvedCount = await Registration.countDocuments({ status: 'approved' });
        const rejectedCount = await Registration.countDocuments({ status: 'rejected' });
        
        // Age distribution
        const ageDistribution = await Registration.aggregate([
            {
                $group: {
                    _id: '$age',
                    count: { $sum: 1 }
                }
            },
            {
                $sort: { _id: 1 }
            }
        ]);
        
        // Recent registrations (last 7 days)
        const weekAgo = new Date();
        weekAgo.setDate(weekAgo.getDate() - 7);
        const recentCount = await Registration.countDocuments({
            registrationDate: { $gte: weekAgo }
        });
        
        res.json({
            success: true,
            data: {
                totalRegistrations,
                pendingCount,
                approvedCount,
                rejectedCount,
                recentCount,
                ageDistribution
            }
        });
        
    } catch (error) {
        console.error('Dashboard error:', error);
        res.status(500).json({
            success: false,
            message: 'Failed to fetch dashboard data'
        });
    }
});

// Export registrations to CSV
router.get('/export', authenticateAdmin, async (req, res) => {
    try {
        const registrations = await Registration.find().select('-__v').sort({ registrationDate: -1 });
        
        const csvHeaders = [
            'Full Name',
            'Email',
            'Phone',
            'Age Range',
            'Occupation',
            'Goals',
            'Experience',
            'Status',
            'Registration Date'
        ];
        
        const csvData = registrations.map(reg => [
            reg.fullName,
            reg.email,
            reg.phone,
            reg.age,
            reg.occupation || '',
            `"${reg.goals.replace(/"/g, '""')}"`,
            `"${(reg.experience || '').replace(/"/g, '""')}"`,
            reg.status,
            reg.registrationDate.toISOString()
        ]);
        
        const csv = [csvHeaders, ...csvData]
            .map(row => row.join(','))
            .join('\n');
        
        res.setHeader('Content-Type', 'text/csv');
        res.setHeader('Content-Disposition', 'attachment; filename="registrations.csv"');
        res.send(csv);
        
    } catch (error) {
        console.error('Export error:', error);
        res.status(500).json({
            success: false,
            message: 'Export failed'
        });
    }
});

module.exports = router;

---

// models/Registration.js - Registration model (extracted from main server)
const mongoose = require('mongoose');
const validator = require('validator');

const registrationSchema = new mongoose.Schema({
    fullName: {
        type: String,
        required: [true, 'Full name is required'],
        trim: true,
        maxlength: [100, 'Full name cannot exceed 100 characters']
    },
    email: {
        type: String,
        required: [true, 'Email is required'],
        trim: true,
        lowercase: true,
        unique: true,
        validate: [validator.isEmail, 'Invalid email address']
    },
    phone: {
        type: String,
        required: [true, 'Phone number is required'],
        trim: true,
        minlength: [10, 'Phone number must be at least 10 digits']
    },
    age: {
        type: String,
        required: [true, 'Age range is required'],
        enum: {
            values: ['18-25', '26-30', '31-35', '36-40'],
            message: 'Invalid age range'
        }
    },
    occupation: {
        type: String,
        trim: true,
        maxlength: [100, 'Occupation cannot exceed 100 characters']
    },
    goals: {
        type: String,
        required: [true, 'Goals are required'],
        trim: true,
        minlength: [10, 'Goals must be at least 10 characters'],
        maxlength: [1000, 'Goals cannot exceed 1000 characters']
    },
    experience: {
        type: String,
        trim: true,
        maxlength: [1000, 'Experience cannot exceed 1000 characters']
    },
    registrationDate: {
        type: Date,
        default: Date.now
    },
    status: {
        type: String,
        enum: {
            values: ['pending', 'approved', 'rejected'],
            message: 'Invalid status'
        },
        default: 'pending'
    },
    notes: {
        type: String,
        trim: true,
        maxlength: [500, 'Notes cannot exceed 500 characters']
    }
}, {
    timestamps: true
});

// Indexes
registrationSchema.index({ email: 1 }, { unique: true });
registrationSchema.index({ status: 1 });
registrationSchema.index({ registrationDate: -1 });

// Methods
registrationSchema.methods.toJSON = function() {
    const registration = this.toObject();
    delete registration.__v;
    return registration;
};

module.exports = mongoose.model('Registration', registrationSchema);

---

// utils/emailService.js - Email service utilities
const nodemailer = require('nodemailer');

class EmailService {
    constructor() {
        this.transporter = nodemailer.createTransporter({
            host: process.env.SMTP_HOST,
            port: process.env.SMTP_PORT,
            secure: false,
            auth: {
                user: process.env.SMTP_USER,
                pass: process.env.SMTP_PASS
            }
        });
    }

    async sendConfirmationEmail(registration) {
        const template = this.getConfirmationTemplate(registration.fullName);
        
        return await this.transporter.sendMail({
            from: process.env.SMTP_FROM,
            to: registration.email,
            subject: 'Registration Confirmation - Mentorship Under 40',
            html: template
        });
    }

    async sendAdminNotification(registration) {
        const template = this.getAdminNotificationTemplate(registration);
        
        return await this.transporter.sendMail({
            from: process.env.SMTP_FROM,
            to: process.env.ADMIN_EMAIL,
            subject: 'New Registration - Mentorship Under 40',
            html: template
        });
    }

    async sendStatusUpdateEmail(registration, newStatus) {
        const template = this.getStatusUpdateTemplate(registration, newStatus);
        
        return await this.transporter.sendMail({
            from: process.env.SMTP_FROM,
            to: registration.email,
            subject: `Application ${newStatus.charAt(0).toUpperCase() + newStatus.slice(1)} - Mentorship Under 40`,
            html: template
        });
    }

    getConfirmationTemplate(name) {
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Registration Confirmation</title>
            <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
                .container { max-width: 600px; margin: 0 auto; }
                .header { background: linear-gradient(135deg, #8B2CF5 0%, #E91E63 100%); color: white; padding: 30px; text-align: center; }
                .content { background: #f8f9fa; padding: 30px; }
                .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }
                .cta-button { background: #FF6B35; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 15px 0; }
                h1 { margin: 0; font-size: 24px; }
                h2 { color: #8B2CF5; margin-top: 0; }
                .contact-info { background: #e9ecef; padding: 15px; border-radius: 8px; margin: 20px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Welcome to Mentorship Under 40!</h1>
                </div>
                <div class="content">
                    <h2>Dear ${name},</h2>
                    <p>Thank you for registering for the Mentorship Under 40 program with Dr. Kusi-Boadum!</p>
                    <p>We have received your application and our team will review it within 3-5 business days. You will receive another email with the next steps once your application has been processed.</p>
                    
                    <div class="contact-info">
                        <h3>Contact Information:</h3>
                        <p><strong>Phone:</strong> +233 24 294 6748</p>
                        <p><strong>Email:</strong> info@kusiboadumministries.com</p>
                        <p><strong>Social:</strong> @dr.kusiboadum</p>
                    </div>
                    
                    <p>We're excited about the possibility of having you join this transformative journey of leadership development and spiritual growth!</p>
                    <p>Blessings,<br><strong>The Kusi-Boadum Ministries Team</strong></p>
                </div>
                <div class="footer">
                    <p>&copy; 2025 Kusi-Boadum Ministries. All rights reserved.</p>
                    <p>Empowering the Next Generation of Leaders</p>
                </div>
            </div>
        </body>
        </html>`;
    }

    getAdminNotificationTemplate(registration) {
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>New Registration Alert</title>
            <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
                .container { max-width: 600px; margin: 0 auto; }
                .header { background: #8B2CF5; color: white; padding: 20px; text-align: center; }
                .content { background: #f8f9fa; padding: 20px; }
                .field { margin-bottom: 15px; padding: 10px; background: white; border-radius: 5px; }
                .label { font-weight: bold; color: #8B2CF5; display: inline-block; width: 120px; }
                .value { color: #333; }
                .goals-section, .experience-section { margin-top: 15px; }
                .goals-section textarea, .experience-section textarea { 
                    width: 100%; 
                    min-height: 80px; 
                    padding: 10px; 
                    border: 1px solid #ddd; 
                    border-radius: 5px; 
                    resize: vertical; 
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🎯 New Mentorship Registration</h1>
                    <p>Received: ${new Date(registration.registrationDate).toLocaleString()}</p>
                </div>
                <div class="content">
                    <div class="field">
                        <span class="label">Full Name:</span>
                        <span class="value">${registration.fullName}</span>
                    </div>
                    <div class="field">
                        <span class="label">Email:</span>
                        <span class="value">${registration.email}</span>
                    </div>
                    <div class="field">
                        <span class="label">Phone:</span>
                        <span class="value">${registration.phone}</span>
                    </div>
                    <div class="field">
                        <span class="label">Age Range:</span>
                        <span class="value">${registration.age} years old</span>
                    </div>
                    <div class="field">
                        <span class="label">Occupation:</span>
                        <span class="value">${registration.occupation || 'Not provided'}</span>
                    </div>
                    
                    <div class="goals-section">
                        <div class="label">Goals & Aspirations:</div>
                        <div style="background: white; padding: 15px; border-radius: 5px; margin-top: 5px; border-left: 4px solid #8B2CF5;">
                            ${registration.goals}
                        </div>
                    </div>
                    
                    <div class="experience-section">
                        <div class="label">Previous Experience:</div>
                        <div style="background: white; padding: 15px; border-radius: 5px; margin-top: 5px; border-left: 4px solid #E91E63;">
                            ${registration.experience || 'No previous experience provided'}
                        </div>
                    </div>
                </div>
            </div>
        </body>
        </html>`;
    }

    getStatusUpdateTemplate(registration, status) {
        const statusColors = {
            approved: '#28a745',
            rejected: '#dc3545'
        };
        
        const statusMessages = {
            approved: {
                title: 'Congratulations! Your Application Has Been Approved',
                message: 'We are excited to welcome you to the Mentorship Under 40 program! You will receive detailed information about the next steps, including program schedule, materials, and meeting logistics within the next 24 hours.',
                nextSteps: [
                    'Check your email for the welcome package',
                    'Join our WhatsApp group for program updates',
                    'Prepare for your first mentorship session',
                    'Complete the pre-program assessment'
                ]
            },
            rejected: {
                title: 'Thank You for Your Interest',
                message: 'After careful consideration, we regret to inform you that we cannot offer you a place in this cohort of the Mentorship Under 40 program. However, we encourage you to apply for future programs.',
                nextSteps: [
                    'Consider reapplying for the next cohort',
                    'Follow our social media for updates on new programs',
                    'Attend our public seminars and workshops',
                    'Continue pursuing your leadership development goals'
                ]
            }
        };
        
        const statusInfo = statusMessages[status];
        const color = statusColors[status];
        
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Application Update - Mentorship Under 40</title>
            <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
                .container { max-width: 600px; margin: 0 auto; }
                .header { background: ${color}; color: white; padding: 30px; text-align: center; }
                .content { background: #f8f9fa; padding: 30px; }
                .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }
                .next-steps { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .next-steps ul { padding-left: 20px; }
                .next-steps li { margin-bottom: 8px; }
                h1 { margin: 0; font-size: 24px; }
                h2 { color: ${color}; margin-top: 0; }
                .contact-info { background: #e9ecef; padding: 15px; border-radius: 8px; margin: 20px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>${statusInfo.title}</h1>
                </div>
                <div class="content">
                    <h2>Dear ${registration.fullName},</h2>
                    <p>${statusInfo.message}</p>
                    
                    <div class="next-steps">
                        <h3>Next Steps:</h3>
                        <ul>
                            ${statusInfo.nextSteps.map(step => `<li>${step}</li>`).join('')}
                        </ul>
                    </div>
                    
                    <div class="contact-info">
                        <h3>Questions? Contact Us:</h3>
                        <p><strong>Phone:</strong> +233 24 294 6748</p>
                        <p><strong>Email:</strong> info@kusiboadumministries.com</p>
                        <p><strong>Social:</strong> @dr.kusiboadum</p>
                    </div>
                    
                    <p>Thank you for your interest in the Mentorship Under 40 program.</p>
                    <p>Blessings,<br><strong>Dr. Kusi-Boadum & Team</strong></p>
                </div>
                <div class="footer">
                    <p>&copy; 2025 Kusi-Boadum Ministries. All rights reserved.</p>
                    <p>Empowering the Next Generation of Leaders</p>
                </div>
            </div>
        </body>
        </html>`;
    }

    async verifyConnection() {
        try {
            await this.transporter.verify();
            console.log('Email service is ready');
            return true;
        } catch (error) {
            console.error('Email service error:', error);
            return false;
        }
    }
}

module.exports = new EmailService();

---

// tests/registration.test.js - Test suite
const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../server');
const Registration = require('../models/Registration');

// Test database
const MONGODB_URI = process.env.MONGODB_TEST_URI || 'mongodb://localhost:27017/mentorship_test';

beforeAll(async () => {
    await mongoose.connect(MONGODB_URI);
});

beforeEach(async () => {
    await Registration.deleteMany({});
});

afterAll(async () => {
    await mongoose.connection.close();
});

describe('Registration API', () => {
    describe('POST /api/register', () => {
        const validRegistrationData = {
            fullName: 'John Doe',
            email: 'john@example.com',
            phone: '+233241234567',
            age: '25-30',
            occupation: 'Software Developer',
            goals: 'I want to become a better leader and grow spiritually.',
            experience: 'Led a small team at my previous job.'
        };

        it('should create a new registration with valid data', async () => {
            const response = await request(app)
                .post('/api/register')
                .send(validRegistrationData)
                .expect(201);

            expect(response.body.success).toBe(true);
            expect(response.body.message).toContain('Registration successful');
            expect(response.body.registrationId).toBeDefined();

            // Verify in database
            const registration = await Registration.findById(response.body.registrationId);
            expect(registration.fullName).toBe(validRegistrationData.fullName);
            expect(registration.email).toBe(validRegistrationData.email.toLowerCase());
            expect(registration.status).toBe('pending');
        });

        it('should reject registration with invalid email', async () => {
            const response = await request(app)
                .post('/api/register')
                .send({
                    ...validRegistrationData,
                    email: 'invalid-email'
                })
                .expect(400);

            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain('valid email');
        });

        it('should reject registration with duplicate email', async () => {
            // Create first registration
            await request(app)
                .post('/api/register')
                .send(validRegistrationData)
                .expect(201);

            // Try to create duplicate
            const response = await request(app)
                .post('/api/register')
                .send(validRegistrationData)
                .expect(409);

            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain('already registered');
        });

        it('should reject registration with missing required fields', async () => {
            const response = await request(app)
                .post('/api/register')
                .send({
                    fullName: 'John Doe',
                    email: 'john@example.com'
                    // Missing required fields
                })
                .expect(400);

            expect(response.body.success).toBe(false);
        });

        it('should reject registration with invalid age range', async () => {
            const response = await request(app)
                .post('/api/register')
                .send({
                    ...validRegistrationData,
                    age: '45-50'
                })
                .expect(400);

            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain('valid age range');
        });

        it('should reject registration with short goals', async () => {
            const response = await request(app)
                .post('/api/register')
                .send({
                    ...validRegistrationData,
                    goals: 'Short'
                })
                .expect(400);

            expect(response.body.success).toBe(false);
            expect(response.body.message).toContain('minimum 10 characters');
        });
    });

    describe('GET /api/health', () => {
        it('should return health status', async () => {
            const response = await request(app)
                .get('/api/health')
                .expect(200);

            expect(response.body.success).toBe(true);
            expect(response.body.message).toBe('Server is running');
            expect(response.body.timestamp).toBeDefined();
        });
    });
});

---

// docker-compose.yml - Docker setup for development
version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - MONGODB_ATLAS='mongodb+srv://enochdziwornu20:YxbNIz6eDpTe6JqV@etornam.s742ioq.mongodb.net/mentorship?retryWrites=true&w=majority'
    depends_on:
      - mongo
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run dev

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=mentorship

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongo

volumes:
  mongo_data:

---

// Dockerfile - Docker configuration
FROM node:18-alpine

WORKDIR /usr/src/app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Change ownership of the working directory
RUN chown -R nodejs:nodejs /usr/src/app
USER nodejs

EXPOSE 3000

CMD ["npm", "start"]

---

// README.md - Documentation
# Mentorship Under 40 - Backend API

This is the backend server for the Mentorship Under 40 registration system by Dr. Kusi-Boadum.

## Features

- **Registration Management**: Handle mentorship program registrations
- **Email Notifications**: Automated email confirmations and admin notifications
- **Admin Dashboard**: Manage applications and view statistics
- **Data Export**: Export registrations to CSV
- **Security**: Rate limiting, input validation, and secure headers
- **Database**: MongoDB with Mongoose ODM
- **Testing**: Comprehensive test suite with Jest

## Tech Stack

- **Runtime**: Node.js 18+
- **Framework**: Express.js
- **Database**: MongoDB
- **ODM**: Mongoose
- **Email**: Nodemailer
- **Validation**: Validator.js
- **Security**: Helmet, CORS, Rate Limiting
- **Testing**: Jest, Supertest
- **Development**: Nodemon

## Quick Start

### 1. Prerequisites
- Node.js 18 or higher
- MongoDB (local or Atlas)
- SMTP email credentials

### 2. Installation
```bash
# Clone the repository
git clone <repository-url>
cd mentorship-under-40-backend

# Install dependencies
npm install

# Copy environment file
cp .env.example .env

# Edit .env with your configuration
nano .env
```

### 3. Environment Configuration
Update `.env` with your settings:
```bash
# Database
MONGODB_URI=mongodb://localhost:27017/mentorship

# Email (Gmail example)
SMTP_USER=pastorkusiboadum@gmail.com
SMTP_PASS=Welcome2025!
ADMIN_EMAIL=admin@example.com

# Security
JWT_SECRET=d5fd469d4094e7e60cd274dff104ddb3

# Admin credentials
ADMIN_USERNAME=admin
ADMIN_PASSWORD=Welcome2025!
```

### 4. Development
```bash
# Start development server
npm run dev

# Run tests
npm test

# Run tests in watch mode
npm run test:watch

# Lint code
npm run lint
```

### 5. Production
```bash
# Start production server
npm start

# Or with Docker
docker-compose up -d
```

## API Endpoints

### Public Endpoints
- `POST /api/register` - Submit registration
- `GET /api/health` - Health check

### Admin Endpoints (requires authentication)
- `POST /api/admin/login` - Admin login
- `GET /api/admin/dashboard` - Dashboard statistics
- `GET /api/admin/registrations` - List registrations
- `PATCH /api/admin/registrations/:id/status` - Update status
- `GET /api/admin/export` - Export to CSV

## Registration Data Structure

```json
{
  "fullName": "John Doe",
  "email": "john@example.com",
  "phone": "+233241234567",
  "age": "25-30",
  "occupation": "Software Developer",
  "goals": "Leadership development goals...",
  "experience": "Previous experience...",
  "status": "pending"
}
```

## Email Templates

The system sends automated emails for:
- **Registration Confirmation**: Sent to applicants
- **Admin Notifications**: New registration alerts
- **Status Updates**: Approval/rejection notifications

## Security Features

- Rate limiting (10 requests per 15 minutes for registration)
- Input validation and sanitization
- Secure headers with Helmet.js
- JWT authentication for admin routes
- CORS protection
- MongoDB injection prevention

## Testing

```bash
# Run all tests
npm test

# Test with coverage
npm run test:coverage

# Test specific file
npm test -- registration.test.js
```

## Database Schema

### Registration Collection
```javascript
{
  fullName: String (required, max: 100)
  email: String (required, unique, validated)
  phone: String (required, min: 10)
  age: String (enum: ['18-25', '26-30', '31-35', '36-40'])
  occupation: String (max: 100)
  goals: String (required, min: 10, max: 1000)
  experience: String (max: 1000)
  status: String (enum: ['pending', 'approved', 'rejected'])
  registrationDate: Date (default: now)
  notes: String (max: 500)
}
```

## Deployment

### Using Docker
```bash
# Build and run
docker-compose up -d

# View logs
docker-compose logs -f app
```

### Using PM2
```bash
# Install PM2 globally
npm install -g pm2

# Start application
pm2 start ecosystem.config.js

# Monitor
pm2 monit
```

## Monitoring & Logging

- Application logs to console
- Request logging with Morgan (in development)
- Error tracking with custom middleware
- Health check endpoint for monitoring

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Run linting and tests
6. Submit a pull request

## License

MIT License - see LICENSE file for details

## Support

For support, contact:
- Email: tech@kusiboadumministries.com
- Phone: +233 24 294 6748

---
